[{"/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/index.js":"1","/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/App.js":"2","/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/reportWebVitals.js":"3","/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/SortingVisualizer/SortingVisualizer.jsx":"4","/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/SortingAlgorithms/MergeSort.js":"5","/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/SortingAlgorithms/SelectionSort.js":"6"},{"size":506,"mtime":1611565272945,"results":"7","hashOfConfig":"8"},{"size":231,"mtime":1611565350127,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1611506228511,"results":"10","hashOfConfig":"8"},{"size":3329,"mtime":1611899929746,"results":"11","hashOfConfig":"8"},{"size":1404,"mtime":1611817016568,"results":"12","hashOfConfig":"8"},{"size":574,"mtime":1611857091638,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1rdhxhb",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/index.js",[],["28","29"],"/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/App.js",[],"/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/reportWebVitals.js",[],"/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/SortingVisualizer/SortingVisualizer.jsx",["30"],"import React, { useEffect, useState } from \"react\";\nimport { MergeSort } from '../SortingAlgorithms/MergeSort';\nimport {SelectionSort} from '../SortingAlgorithms/SelectionSort'\nimport \"./SortingVisualizer.css\";\n\nconst ANIMATION_SPEED_MS = 2;\nconst PRIMARY_COLOR = 'rgb(182, 221, 137)';\nconst SECONDARY_COLOR = 'red';\n// const SORTED_COLOR='BLUE';\n\n\nexport default function SortingVisualizer() {\n  const [array, setArray] = useState([]);\n\n  function randomIntFromIntervals(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  \n\n  const getArray = () => {\n    const array=[]\n    for (let i = 0; i < 250; i++) {\n      array[i] = randomIntFromIntervals(5, 500);\n    }\n    setArray(array);\n  };\n\n \n  const mergeSort=()=>{\n    const trace=MergeSort(array);\n    console.log(trace);\n    for(let i=0;i<trace.length;i++){\n      const arrayBars=document.getElementsByClassName('array-bar');\n      const isColorChange= i % 3 !==2;\n      if (isColorChange) {\n        const [oneIdx, twoIdx] = trace[i];\n        const oneStyle = arrayBars[oneIdx].style;\n        const twoStyle = arrayBars[twoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          oneStyle.backgroundColor = color;\n          twoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = trace[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n          // barOneStyle.backgroundColor=SORTED_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n\n    }\n\n  }\n  // const quickSort=()=>{}\n  const selectionSort=()=>{\n    console.log(array);\n    const trace=SelectionSort(array);\n    console.log(trace);\n    for(let i=0; i<trace.length; i++){\n      const arrayBars=document.getElementsByClassName('array-bar');\n      const isColorChange= i % 3 !==2;\n      // const color1=i%4;\n      // const color2=== i%4;\n      if (isColorChange) {\n        const [oneIdx, twoIdx] = trace[i];\n        const oneStyle = arrayBars[oneIdx].style;\n        const twoStyle = arrayBars[twoIdx].style;\n        const color = i % 3=== 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          oneStyle.backgroundColor = color;\n          twoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight1,barTwoIdx,newHeight2] = trace[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight1}px`;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barTwoStyle.height = `${newHeight2}px`;\n          // barOneStyle.backgroundColor=SORTED_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n      \n    }\n  }\n\n\n  useEffect(() => {\n    getArray();\n  },[]);\n\n\n  return (\n    <div className=\"array-container\">\n    \n      {array.map((itms, idx) => (\n        <div className=\"array-bar\" key={idx} style={{height:`${itms}px`}}>\n        </div>\n      ))}\n      <button onClick={getArray}>Generate New Array</button>\n      <button onClick={mergeSort}>Merge Sort</button>\n      {/* <button onClick={quickSort}>Quick Sort</button> */}\n      <button onClick={selectionSort}>Selection Sort</button>\n      \n    </div>\n  );\n}\n","/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/SortingAlgorithms/MergeSort.js",[],"/home/farzana/projects/sorting-visualizer/sorting-visualizer-project/src/SortingAlgorithms/SelectionSort.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":92,"column":5,"nodeType":"37","endLine":92,"endColumn":7,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getArray'. Either include it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [getArray]",{"range":"44","text":"45"},[2870,2872],"[getArray]"]